// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Vovarama1992/go-ai-messenger/proto/messagepb (interfaces: MessageServiceClient)
//
// Generated by this command:
//
//	mockgen github.com/Vovarama1992/go-ai-messenger/proto/messagepb MessageServiceClient
//

// Package mock_messagepb is a generated GoMock package.
package mock_messagepb

import (
	context "context"
	reflect "reflect"

	messagepb "github.com/Vovarama1992/go-ai-messenger/proto/messagepb"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockMessageServiceClient is a mock of MessageServiceClient interface.
type MockMessageServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockMessageServiceClientMockRecorder
	isgomock struct{}
}

// MockMessageServiceClientMockRecorder is the mock recorder for MockMessageServiceClient.
type MockMessageServiceClientMockRecorder struct {
	mock *MockMessageServiceClient
}

// NewMockMessageServiceClient creates a new mock instance.
func NewMockMessageServiceClient(ctrl *gomock.Controller) *MockMessageServiceClient {
	mock := &MockMessageServiceClient{ctrl: ctrl}
	mock.recorder = &MockMessageServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageServiceClient) EXPECT() *MockMessageServiceClientMockRecorder {
	return m.recorder
}

// GetMessagesByChat mocks base method.
func (m *MockMessageServiceClient) GetMessagesByChat(ctx context.Context, in *messagepb.GetMessagesRequest, opts ...grpc.CallOption) (*messagepb.GetMessagesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMessagesByChat", varargs...)
	ret0, _ := ret[0].(*messagepb.GetMessagesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessagesByChat indicates an expected call of GetMessagesByChat.
func (mr *MockMessageServiceClientMockRecorder) GetMessagesByChat(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessagesByChat", reflect.TypeOf((*MockMessageServiceClient)(nil).GetMessagesByChat), varargs...)
}
