// Code generated by MockGen. DO NOT EDIT.
// Source: message-service//internal/message/ports/chat.go
//
// Generated by this command:
//
//	mockgen -source=message-service//internal/message/ports/chat.go -destination=message-service//internal/message/mocks/chat_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	ports "github.com/Vovarama1992/go-ai-messenger/message-service/internal/message/ports"
	gomock "go.uber.org/mock/gomock"
)

// MockChatClient is a mock of ChatClient interface.
type MockChatClient struct {
	ctrl     *gomock.Controller
	recorder *MockChatClientMockRecorder
	isgomock struct{}
}

// MockChatClientMockRecorder is the mock recorder for MockChatClient.
type MockChatClientMockRecorder struct {
	mock *MockChatClient
}

// NewMockChatClient creates a new mock instance.
func NewMockChatClient(ctrl *gomock.Controller) *MockChatClient {
	mock := &MockChatClient{ctrl: ctrl}
	mock.recorder = &MockChatClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChatClient) EXPECT() *MockChatClientMockRecorder {
	return m.recorder
}

// GetThreadInfo mocks base method.
func (m *MockChatClient) GetThreadInfo(ctx context.Context, threadID string) (*ports.ThreadInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetThreadInfo", ctx, threadID)
	ret0, _ := ret[0].(*ports.ThreadInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetThreadInfo indicates an expected call of GetThreadInfo.
func (mr *MockChatClientMockRecorder) GetThreadInfo(ctx, threadID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetThreadInfo", reflect.TypeOf((*MockChatClient)(nil).GetThreadInfo), ctx, threadID)
}
