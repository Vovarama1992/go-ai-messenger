// Code generated by MockGen. DO NOT EDIT.
// Source: ai-service//internal/ports/kafka_writer.go
//
// Generated by this command:
//
//	mockgen -source=ai-service//internal/ports/kafka_writer.go -destination=ai-service//internal/mocks/kafka_writer_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockKafkaWriter is a mock of KafkaWriter interface.
type MockKafkaWriter struct {
	ctrl     *gomock.Controller
	recorder *MockKafkaWriterMockRecorder
	isgomock struct{}
}

// MockKafkaWriterMockRecorder is the mock recorder for MockKafkaWriter.
type MockKafkaWriterMockRecorder struct {
	mock *MockKafkaWriter
}

// NewMockKafkaWriter creates a new mock instance.
func NewMockKafkaWriter(ctrl *gomock.Controller) *MockKafkaWriter {
	mock := &MockKafkaWriter{ctrl: ctrl}
	mock.recorder = &MockKafkaWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKafkaWriter) EXPECT() *MockKafkaWriterMockRecorder {
	return m.recorder
}

// WriteMessages mocks base method.
func (m *MockKafkaWriter) WriteMessages(ctx context.Context, msgs ...[]byte) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range msgs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WriteMessages", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteMessages indicates an expected call of WriteMessages.
func (mr *MockKafkaWriterMockRecorder) WriteMessages(ctx any, msgs ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, msgs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteMessages", reflect.TypeOf((*MockKafkaWriter)(nil).WriteMessages), varargs...)
}
