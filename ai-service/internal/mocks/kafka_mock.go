// Code generated by MockGen. DO NOT EDIT.
// Source: ai-service//internal/ports/kafka.go
//
// Generated by this command:
//
//	mockgen -source=ai-service//internal/ports/kafka.go -destination=ai-service//internal/mocks/kafka_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockKafkaConsumer is a mock of KafkaConsumer interface.
type MockKafkaConsumer struct {
	ctrl     *gomock.Controller
	recorder *MockKafkaConsumerMockRecorder
	isgomock struct{}
}

// MockKafkaConsumerMockRecorder is the mock recorder for MockKafkaConsumer.
type MockKafkaConsumerMockRecorder struct {
	mock *MockKafkaConsumer
}

// NewMockKafkaConsumer creates a new mock instance.
func NewMockKafkaConsumer(ctrl *gomock.Controller) *MockKafkaConsumer {
	mock := &MockKafkaConsumer{ctrl: ctrl}
	mock.recorder = &MockKafkaConsumerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKafkaConsumer) EXPECT() *MockKafkaConsumerMockRecorder {
	return m.recorder
}

// StartConsuming mocks base method.
func (m *MockKafkaConsumer) StartConsuming(ctx context.Context, out chan<- []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartConsuming", ctx, out)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartConsuming indicates an expected call of StartConsuming.
func (mr *MockKafkaConsumerMockRecorder) StartConsuming(ctx, out any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartConsuming", reflect.TypeOf((*MockKafkaConsumer)(nil).StartConsuming), ctx, out)
}

// MockKafkaProducer is a mock of KafkaProducer interface.
type MockKafkaProducer struct {
	ctrl     *gomock.Controller
	recorder *MockKafkaProducerMockRecorder
	isgomock struct{}
}

// MockKafkaProducerMockRecorder is the mock recorder for MockKafkaProducer.
type MockKafkaProducerMockRecorder struct {
	mock *MockKafkaProducer
}

// NewMockKafkaProducer creates a new mock instance.
func NewMockKafkaProducer(ctrl *gomock.Controller) *MockKafkaProducer {
	mock := &MockKafkaProducer{ctrl: ctrl}
	mock.recorder = &MockKafkaProducerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKafkaProducer) EXPECT() *MockKafkaProducerMockRecorder {
	return m.recorder
}

// Publish mocks base method.
func (m *MockKafkaProducer) Publish(ctx context.Context, key string, value []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", ctx, key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MockKafkaProducerMockRecorder) Publish(ctx, key, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockKafkaProducer)(nil).Publish), ctx, key, value)
}
