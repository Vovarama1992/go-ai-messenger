// Code generated by MockGen. DO NOT EDIT.
// Source: ai-service//internal/ports/kafka_reader.go
//
// Generated by this command:
//
//	mockgen -source=ai-service//internal/ports/kafka_reader.go -destination=ai-service//internal/mocks/kafka_reader_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockKafkaReader is a mock of KafkaReader interface.
type MockKafkaReader struct {
	ctrl     *gomock.Controller
	recorder *MockKafkaReaderMockRecorder
	isgomock struct{}
}

// MockKafkaReaderMockRecorder is the mock recorder for MockKafkaReader.
type MockKafkaReaderMockRecorder struct {
	mock *MockKafkaReader
}

// NewMockKafkaReader creates a new mock instance.
func NewMockKafkaReader(ctrl *gomock.Controller) *MockKafkaReader {
	mock := &MockKafkaReader{ctrl: ctrl}
	mock.recorder = &MockKafkaReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKafkaReader) EXPECT() *MockKafkaReaderMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockKafkaReader) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockKafkaReaderMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockKafkaReader)(nil).Close))
}

// ReadMessage mocks base method.
func (m *MockKafkaReader) ReadMessage(ctx context.Context) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadMessage", ctx)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadMessage indicates an expected call of ReadMessage.
func (mr *MockKafkaReaderMockRecorder) ReadMessage(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadMessage", reflect.TypeOf((*MockKafkaReader)(nil).ReadMessage), ctx)
}
