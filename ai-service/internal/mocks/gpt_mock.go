// Code generated by MockGen. DO NOT EDIT.
// Source: ai-service//internal/ports/gpt.go
//
// Generated by this command:
//
//	mockgen -source=ai-service//internal/ports/gpt.go -destination=ai-service//internal/mocks/gpt_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	dto "github.com/Vovarama1992/go-ai-messenger/ai-service/internal/dto"
	gomock "go.uber.org/mock/gomock"
)

// MockGptService is a mock of GptService interface.
type MockGptService struct {
	ctrl     *gomock.Controller
	recorder *MockGptServiceMockRecorder
	isgomock struct{}
}

// MockGptServiceMockRecorder is the mock recorder for MockGptService.
type MockGptServiceMockRecorder struct {
	mock *MockGptService
}

// NewMockGptService creates a new mock instance.
func NewMockGptService(ctrl *gomock.Controller) *MockGptService {
	mock := &MockGptService{ctrl: ctrl}
	mock.recorder = &MockGptServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGptService) EXPECT() *MockGptServiceMockRecorder {
	return m.recorder
}

// CreateThreadForUserAndChat mocks base method.
func (m *MockGptService) CreateThreadForUserAndChat(ctx context.Context, userEmail string, messages []dto.ChatMessage) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateThreadForUserAndChat", ctx, userEmail, messages)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateThreadForUserAndChat indicates an expected call of CreateThreadForUserAndChat.
func (mr *MockGptServiceMockRecorder) CreateThreadForUserAndChat(ctx, userEmail, messages any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateThreadForUserAndChat", reflect.TypeOf((*MockGptService)(nil).CreateThreadForUserAndChat), ctx, userEmail, messages)
}

// GetAdvice mocks base method.
func (m *MockGptService) GetAdvice(ctx context.Context, threadID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAdvice", ctx, threadID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAdvice indicates an expected call of GetAdvice.
func (mr *MockGptServiceMockRecorder) GetAdvice(ctx, threadID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAdvice", reflect.TypeOf((*MockGptService)(nil).GetAdvice), ctx, threadID)
}

// SendMessageAndGetAutoreply mocks base method.
func (m *MockGptService) SendMessageAndGetAutoreply(ctx context.Context, threadID, userEmail, userMessage string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessageAndGetAutoreply", ctx, threadID, userEmail, userMessage)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendMessageAndGetAutoreply indicates an expected call of SendMessageAndGetAutoreply.
func (mr *MockGptServiceMockRecorder) SendMessageAndGetAutoreply(ctx, threadID, userEmail, userMessage any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessageAndGetAutoreply", reflect.TypeOf((*MockGptService)(nil).SendMessageAndGetAutoreply), ctx, threadID, userEmail, userMessage)
}

// SendMessageToThread mocks base method.
func (m *MockGptService) SendMessageToThread(ctx context.Context, threadID, role, content string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessageToThread", ctx, threadID, role, content)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMessageToThread indicates an expected call of SendMessageToThread.
func (mr *MockGptServiceMockRecorder) SendMessageToThread(ctx, threadID, role, content any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessageToThread", reflect.TypeOf((*MockGptService)(nil).SendMessageToThread), ctx, threadID, role, content)
}
