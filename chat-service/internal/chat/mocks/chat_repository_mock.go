// Code generated by MockGen. DO NOT EDIT.
// Source: chat-service//internal/chat/ports/chat_repository.go
//
// Generated by this command:
//
//	mockgen -source=chat-service//internal/chat/ports/chat_repository.go -destination=chat-service//internal/chat/mocks/chat_repository_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	model "github.com/Vovarama1992/go-ai-messenger/chat-service/internal/chat/model"
	gomock "go.uber.org/mock/gomock"
)

// MockChatRepository is a mock of ChatRepository interface.
type MockChatRepository struct {
	ctrl     *gomock.Controller
	recorder *MockChatRepositoryMockRecorder
	isgomock struct{}
}

// MockChatRepositoryMockRecorder is the mock recorder for MockChatRepository.
type MockChatRepositoryMockRecorder struct {
	mock *MockChatRepository
}

// NewMockChatRepository creates a new mock instance.
func NewMockChatRepository(ctrl *gomock.Controller) *MockChatRepository {
	mock := &MockChatRepository{ctrl: ctrl}
	mock.recorder = &MockChatRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChatRepository) EXPECT() *MockChatRepositoryMockRecorder {
	return m.recorder
}

// AcceptInvite mocks base method.
func (m *MockChatRepository) AcceptInvite(ctx context.Context, chatID, userID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcceptInvite", ctx, chatID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AcceptInvite indicates an expected call of AcceptInvite.
func (mr *MockChatRepositoryMockRecorder) AcceptInvite(ctx, chatID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptInvite", reflect.TypeOf((*MockChatRepository)(nil).AcceptInvite), ctx, chatID, userID)
}

// Create mocks base method.
func (m *MockChatRepository) Create(ctx context.Context, chat *model.Chat, memberIDs []int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, chat, memberIDs)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockChatRepositoryMockRecorder) Create(ctx, chat, memberIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockChatRepository)(nil).Create), ctx, chat, memberIDs)
}

// FindByID mocks base method.
func (m *MockChatRepository) FindByID(ctx context.Context, id int64) (*model.Chat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", ctx, id)
	ret0, _ := ret[0].(*model.Chat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockChatRepositoryMockRecorder) FindByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockChatRepository)(nil).FindByID), ctx, id)
}

// GetChatParticipants mocks base method.
func (m *MockChatRepository) GetChatParticipants(ctx context.Context, chatID int64) ([]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChatParticipants", ctx, chatID)
	ret0, _ := ret[0].([]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChatParticipants indicates an expected call of GetChatParticipants.
func (mr *MockChatRepositoryMockRecorder) GetChatParticipants(ctx, chatID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChatParticipants", reflect.TypeOf((*MockChatRepository)(nil).GetChatParticipants), ctx, chatID)
}

// GetPendingInvites mocks base method.
func (m *MockChatRepository) GetPendingInvites(ctx context.Context, userID int64) ([]model.Chat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPendingInvites", ctx, userID)
	ret0, _ := ret[0].([]model.Chat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPendingInvites indicates an expected call of GetPendingInvites.
func (mr *MockChatRepositoryMockRecorder) GetPendingInvites(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPendingInvites", reflect.TypeOf((*MockChatRepository)(nil).GetPendingInvites), ctx, userID)
}

// SendInvite mocks base method.
func (m *MockChatRepository) SendInvite(ctx context.Context, chatID int64, userIDs []int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendInvite", ctx, chatID, userIDs)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendInvite indicates an expected call of SendInvite.
func (mr *MockChatRepositoryMockRecorder) SendInvite(ctx, chatID, userIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendInvite", reflect.TypeOf((*MockChatRepository)(nil).SendInvite), ctx, chatID, userIDs)
}
