// Code generated by MockGen. DO NOT EDIT.
// Source: chat-service//internal/chat/ports/message_client.go
//
// Generated by this command:
//
//	mockgen -source=chat-service//internal/chat/ports/message_client.go -destination=chat-service//internal/chat/mocks/message_client_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	messagepb "github.com/Vovarama1992/go-ai-messenger/proto/messagepb"
	gomock "go.uber.org/mock/gomock"
)

// MockMessageClient is a mock of MessageClient interface.
type MockMessageClient struct {
	ctrl     *gomock.Controller
	recorder *MockMessageClientMockRecorder
	isgomock struct{}
}

// MockMessageClientMockRecorder is the mock recorder for MockMessageClient.
type MockMessageClientMockRecorder struct {
	mock *MockMessageClient
}

// NewMockMessageClient creates a new mock instance.
func NewMockMessageClient(ctrl *gomock.Controller) *MockMessageClient {
	mock := &MockMessageClient{ctrl: ctrl}
	mock.recorder = &MockMessageClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageClient) EXPECT() *MockMessageClientMockRecorder {
	return m.recorder
}

// GetMessagesByChat mocks base method.
func (m *MockMessageClient) GetMessagesByChat(ctx context.Context, chatID int64) ([]*messagepb.ChatMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessagesByChat", ctx, chatID)
	ret0, _ := ret[0].([]*messagepb.ChatMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessagesByChat indicates an expected call of GetMessagesByChat.
func (mr *MockMessageClientMockRecorder) GetMessagesByChat(ctx, chatID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessagesByChat", reflect.TypeOf((*MockMessageClient)(nil).GetMessagesByChat), ctx, chatID)
}
