// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Vovarama1992/go-ai-messenger/chat-service/internal/chat/ports (interfaces: ChatBindingRepository)
//
// Generated by this command:
//
//	mockgen github.com/Vovarama1992/go-ai-messenger/chat-service/internal/chat/ports ChatBindingRepository
//

// Package mock_ports is a generated GoMock package.
package mock_ports

import (
	context "context"
	reflect "reflect"

	model "github.com/Vovarama1992/go-ai-messenger/chat-service/internal/chat/model"
	gomock "go.uber.org/mock/gomock"
)

// MockChatBindingRepository is a mock of ChatBindingRepository interface.
type MockChatBindingRepository struct {
	ctrl     *gomock.Controller
	recorder *MockChatBindingRepositoryMockRecorder
	isgomock struct{}
}

// MockChatBindingRepositoryMockRecorder is the mock recorder for MockChatBindingRepository.
type MockChatBindingRepositoryMockRecorder struct {
	mock *MockChatBindingRepository
}

// NewMockChatBindingRepository creates a new mock instance.
func NewMockChatBindingRepository(ctrl *gomock.Controller) *MockChatBindingRepository {
	mock := &MockChatBindingRepository{ctrl: ctrl}
	mock.recorder = &MockChatBindingRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChatBindingRepository) EXPECT() *MockChatBindingRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockChatBindingRepository) Create(ctx context.Context, binding *model.ChatBinding) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, binding)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockChatBindingRepositoryMockRecorder) Create(ctx, binding any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockChatBindingRepository)(nil).Create), ctx, binding)
}

// Delete mocks base method.
func (m *MockChatBindingRepository) Delete(ctx context.Context, userID, chatID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, userID, chatID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockChatBindingRepositoryMockRecorder) Delete(ctx, userID, chatID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockChatBindingRepository)(nil).Delete), ctx, userID, chatID)
}

// FindBindingsByChatID mocks base method.
func (m *MockChatBindingRepository) FindBindingsByChatID(ctx context.Context, chatID int64) ([]*model.ChatBinding, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindBindingsByChatID", ctx, chatID)
	ret0, _ := ret[0].([]*model.ChatBinding)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindBindingsByChatID indicates an expected call of FindBindingsByChatID.
func (mr *MockChatBindingRepositoryMockRecorder) FindBindingsByChatID(ctx, chatID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBindingsByChatID", reflect.TypeOf((*MockChatBindingRepository)(nil).FindBindingsByChatID), ctx, chatID)
}

// FindByThreadID mocks base method.
func (m *MockChatBindingRepository) FindByThreadID(ctx context.Context, threadID string) (*model.ChatBinding, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByThreadID", ctx, threadID)
	ret0, _ := ret[0].(*model.ChatBinding)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByThreadID indicates an expected call of FindByThreadID.
func (mr *MockChatBindingRepositoryMockRecorder) FindByThreadID(ctx, threadID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByThreadID", reflect.TypeOf((*MockChatBindingRepository)(nil).FindByThreadID), ctx, threadID)
}

// FindByUserAndChat mocks base method.
func (m *MockChatBindingRepository) FindByUserAndChat(ctx context.Context, userID, chatID int64) (*model.ChatBinding, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUserAndChat", ctx, userID, chatID)
	ret0, _ := ret[0].(*model.ChatBinding)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByUserAndChat indicates an expected call of FindByUserAndChat.
func (mr *MockChatBindingRepositoryMockRecorder) FindByUserAndChat(ctx, userID, chatID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUserAndChat", reflect.TypeOf((*MockChatBindingRepository)(nil).FindByUserAndChat), ctx, userID, chatID)
}

// Update mocks base method.
func (m *MockChatBindingRepository) Update(ctx context.Context, binding *model.ChatBinding) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, binding)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockChatBindingRepositoryMockRecorder) Update(ctx, binding any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockChatBindingRepository)(nil).Update), ctx, binding)
}

// UpdateThreadID mocks base method.
func (m *MockChatBindingRepository) UpdateThreadID(ctx context.Context, chatID, userID int64, threadID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateThreadID", ctx, chatID, userID, threadID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateThreadID indicates an expected call of UpdateThreadID.
func (mr *MockChatBindingRepositoryMockRecorder) UpdateThreadID(ctx, chatID, userID, threadID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateThreadID", reflect.TypeOf((*MockChatBindingRepository)(nil).UpdateThreadID), ctx, chatID, userID, threadID)
}
