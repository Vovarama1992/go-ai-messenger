// Code generated by MockGen. DO NOT EDIT.
// Source: chat-service//internal/chat/ports/message_broker.go
//
// Generated by this command:
//
//	mockgen -source=chat-service//internal/chat/ports/message_broker.go -destination=chat-service//internal/chat/mocks/message_broker_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	model "github.com/Vovarama1992/go-ai-messenger/chat-service/internal/chat/model"
	gomock "go.uber.org/mock/gomock"
)

// MockMessageBroker is a mock of MessageBroker interface.
type MockMessageBroker struct {
	ctrl     *gomock.Controller
	recorder *MockMessageBrokerMockRecorder
	isgomock struct{}
}

// MockMessageBrokerMockRecorder is the mock recorder for MockMessageBroker.
type MockMessageBrokerMockRecorder struct {
	mock *MockMessageBroker
}

// NewMockMessageBroker creates a new mock instance.
func NewMockMessageBroker(ctrl *gomock.Controller) *MockMessageBroker {
	mock := &MockMessageBroker{ctrl: ctrl}
	mock.recorder = &MockMessageBrokerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageBroker) EXPECT() *MockMessageBrokerMockRecorder {
	return m.recorder
}

// SendAiBindingInit mocks base method.
func (m *MockMessageBroker) SendAiBindingInit(ctx context.Context, payload model.AiBindingInitPayload) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendAiBindingInit", ctx, payload)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendAiBindingInit indicates an expected call of SendAiBindingInit.
func (mr *MockMessageBrokerMockRecorder) SendAiBindingInit(ctx, payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendAiBindingInit", reflect.TypeOf((*MockMessageBroker)(nil).SendAiBindingInit), ctx, payload)
}

// SendInvite mocks base method.
func (m *MockMessageBroker) SendInvite(ctx context.Context, payload any, topic string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendInvite", ctx, payload, topic)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendInvite indicates an expected call of SendInvite.
func (mr *MockMessageBrokerMockRecorder) SendInvite(ctx, payload, topic any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendInvite", reflect.TypeOf((*MockMessageBroker)(nil).SendInvite), ctx, payload, topic)
}
