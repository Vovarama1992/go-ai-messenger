// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Vovarama1992/go-ai-messenger/proto/chatpb (interfaces: ChatServiceClient)
//
// Generated by this command:
//
//	mockgen github.com/Vovarama1992/go-ai-messenger/proto/chatpb ChatServiceClient
//

// Package mock_chatpb is a generated GoMock package.
package mock_chatpb

import (
	context "context"
	reflect "reflect"

	chatpb "github.com/Vovarama1992/go-ai-messenger/proto/chatpb"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockChatServiceClient is a mock of ChatServiceClient interface.
type MockChatServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockChatServiceClientMockRecorder
	isgomock struct{}
}

// MockChatServiceClientMockRecorder is the mock recorder for MockChatServiceClient.
type MockChatServiceClientMockRecorder struct {
	mock *MockChatServiceClient
}

// NewMockChatServiceClient creates a new mock instance.
func NewMockChatServiceClient(ctrl *gomock.Controller) *MockChatServiceClient {
	mock := &MockChatServiceClient{ctrl: ctrl}
	mock.recorder = &MockChatServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChatServiceClient) EXPECT() *MockChatServiceClientMockRecorder {
	return m.recorder
}

// GetBindingsByChat mocks base method.
func (m *MockChatServiceClient) GetBindingsByChat(ctx context.Context, in *chatpb.GetBindingsByChatRequest, opts ...grpc.CallOption) (*chatpb.GetBindingsByChatResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBindingsByChat", varargs...)
	ret0, _ := ret[0].(*chatpb.GetBindingsByChatResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBindingsByChat indicates an expected call of GetBindingsByChat.
func (mr *MockChatServiceClientMockRecorder) GetBindingsByChat(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBindingsByChat", reflect.TypeOf((*MockChatServiceClient)(nil).GetBindingsByChat), varargs...)
}

// GetChatByID mocks base method.
func (m *MockChatServiceClient) GetChatByID(ctx context.Context, in *chatpb.GetChatByIDRequest, opts ...grpc.CallOption) (*chatpb.GetChatByIDResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetChatByID", varargs...)
	ret0, _ := ret[0].(*chatpb.GetChatByIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChatByID indicates an expected call of GetChatByID.
func (mr *MockChatServiceClientMockRecorder) GetChatByID(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChatByID", reflect.TypeOf((*MockChatServiceClient)(nil).GetChatByID), varargs...)
}

// GetThreadContext mocks base method.
func (m *MockChatServiceClient) GetThreadContext(ctx context.Context, in *chatpb.GetThreadContextRequest, opts ...grpc.CallOption) (*chatpb.GetThreadContextResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetThreadContext", varargs...)
	ret0, _ := ret[0].(*chatpb.GetThreadContextResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetThreadContext indicates an expected call of GetThreadContext.
func (mr *MockChatServiceClientMockRecorder) GetThreadContext(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetThreadContext", reflect.TypeOf((*MockChatServiceClient)(nil).GetThreadContext), varargs...)
}

// GetUserWithChatByThreadID mocks base method.
func (m *MockChatServiceClient) GetUserWithChatByThreadID(ctx context.Context, in *chatpb.GetUserWithChatByThreadIDRequest, opts ...grpc.CallOption) (*chatpb.GetUserWithChatByThreadIDResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUserWithChatByThreadID", varargs...)
	ret0, _ := ret[0].(*chatpb.GetUserWithChatByThreadIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserWithChatByThreadID indicates an expected call of GetUserWithChatByThreadID.
func (mr *MockChatServiceClientMockRecorder) GetUserWithChatByThreadID(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserWithChatByThreadID", reflect.TypeOf((*MockChatServiceClient)(nil).GetUserWithChatByThreadID), varargs...)
}

// GetUsersByChatID mocks base method.
func (m *MockChatServiceClient) GetUsersByChatID(ctx context.Context, in *chatpb.GetUsersByChatIDRequest, opts ...grpc.CallOption) (*chatpb.GetUsersByChatIDResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUsersByChatID", varargs...)
	ret0, _ := ret[0].(*chatpb.GetUsersByChatIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsersByChatID indicates an expected call of GetUsersByChatID.
func (mr *MockChatServiceClientMockRecorder) GetUsersByChatID(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersByChatID", reflect.TypeOf((*MockChatServiceClient)(nil).GetUsersByChatID), varargs...)
}
