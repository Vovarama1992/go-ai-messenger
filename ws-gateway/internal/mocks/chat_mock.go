// Code generated by MockGen. DO NOT EDIT.
// Source: ./ws-gateway/internal/ports/chat.go
//
// Generated by this command:
//
//	mockgen -source=./ws-gateway/internal/ports/chat.go -destination=./ws-gateway/internal/mocks/chat_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	ports "github.com/Vovarama1992/go-ai-messenger/ws-gateway/internal/ports"
	gomock "go.uber.org/mock/gomock"
)

// MockChatService is a mock of ChatService interface.
type MockChatService struct {
	ctrl     *gomock.Controller
	recorder *MockChatServiceMockRecorder
	isgomock struct{}
}

// MockChatServiceMockRecorder is the mock recorder for MockChatService.
type MockChatServiceMockRecorder struct {
	mock *MockChatService
}

// NewMockChatService creates a new mock instance.
func NewMockChatService(ctrl *gomock.Controller) *MockChatService {
	mock := &MockChatService{ctrl: ctrl}
	mock.recorder = &MockChatServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChatService) EXPECT() *MockChatServiceMockRecorder {
	return m.recorder
}

// GetBindingsByChat mocks base method.
func (m *MockChatService) GetBindingsByChat(ctx context.Context, chatID int64) ([]ports.ChatBinding, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBindingsByChat", ctx, chatID)
	ret0, _ := ret[0].([]ports.ChatBinding)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBindingsByChat indicates an expected call of GetBindingsByChat.
func (mr *MockChatServiceMockRecorder) GetBindingsByChat(ctx, chatID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBindingsByChat", reflect.TypeOf((*MockChatService)(nil).GetBindingsByChat), ctx, chatID)
}
