// Code generated by MockGen. DO NOT EDIT.
// Source: ./ws-gateway/internal/ports/kafka.go
//
// Generated by this command:
//
//	mockgen -source=./ws-gateway/internal/ports/kafka.go -destination=./ws-gateway/internal/mocks/kafka_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockKafkaProducer is a mock of KafkaProducer interface.
type MockKafkaProducer struct {
	ctrl     *gomock.Controller
	recorder *MockKafkaProducerMockRecorder
	isgomock struct{}
}

// MockKafkaProducerMockRecorder is the mock recorder for MockKafkaProducer.
type MockKafkaProducerMockRecorder struct {
	mock *MockKafkaProducer
}

// NewMockKafkaProducer creates a new mock instance.
func NewMockKafkaProducer(ctrl *gomock.Controller) *MockKafkaProducer {
	mock := &MockKafkaProducer{ctrl: ctrl}
	mock.recorder = &MockKafkaProducerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKafkaProducer) EXPECT() *MockKafkaProducerMockRecorder {
	return m.recorder
}

// Produce mocks base method.
func (m *MockKafkaProducer) Produce(ctx context.Context, topic string, payload any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Produce", ctx, topic, payload)
	ret0, _ := ret[0].(error)
	return ret0
}

// Produce indicates an expected call of Produce.
func (mr *MockKafkaProducerMockRecorder) Produce(ctx, topic, payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Produce", reflect.TypeOf((*MockKafkaProducer)(nil).Produce), ctx, topic, payload)
}
