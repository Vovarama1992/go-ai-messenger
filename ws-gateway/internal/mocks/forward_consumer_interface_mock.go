// Code generated by MockGen. DO NOT EDIT.
// Source: ws-gateway//internal/ports/forward_consumer_interface.go
//
// Generated by this command:
//
//	mockgen -source=ws-gateway//internal/ports/forward_consumer_interface.go -destination=ws-gateway//internal/mocks/forward_consumer_interface_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockForwardConsumerInterface is a mock of ForwardConsumerInterface interface.
type MockForwardConsumerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockForwardConsumerInterfaceMockRecorder
	isgomock struct{}
}

// MockForwardConsumerInterfaceMockRecorder is the mock recorder for MockForwardConsumerInterface.
type MockForwardConsumerInterfaceMockRecorder struct {
	mock *MockForwardConsumerInterface
}

// NewMockForwardConsumerInterface creates a new mock instance.
func NewMockForwardConsumerInterface(ctrl *gomock.Controller) *MockForwardConsumerInterface {
	mock := &MockForwardConsumerInterface{ctrl: ctrl}
	mock.recorder = &MockForwardConsumerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockForwardConsumerInterface) EXPECT() *MockForwardConsumerInterfaceMockRecorder {
	return m.recorder
}

// Start mocks base method.
func (m *MockForwardConsumerInterface) Start() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start")
}

// Start indicates an expected call of Start.
func (mr *MockForwardConsumerInterfaceMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockForwardConsumerInterface)(nil).Start))
}

// Stop mocks base method.
func (m *MockForwardConsumerInterface) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockForwardConsumerInterfaceMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockForwardConsumerInterface)(nil).Stop))
}
