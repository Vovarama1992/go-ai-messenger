// Code generated by MockGen. DO NOT EDIT.
// Source: ws-gateway//internal/ports/hub.go
//
// Generated by this command:
//
//	mockgen -source=ws-gateway//internal/ports/hub.go -destination=ws-gateway//internal/mocks/hub_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockHub is a mock of Hub interface.
type MockHub struct {
	ctrl     *gomock.Controller
	recorder *MockHubMockRecorder
	isgomock struct{}
}

// MockHubMockRecorder is the mock recorder for MockHub.
type MockHubMockRecorder struct {
	mock *MockHub
}

// NewMockHub creates a new mock instance.
func NewMockHub(ctrl *gomock.Controller) *MockHub {
	mock := &MockHub{ctrl: ctrl}
	mock.recorder = &MockHubMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHub) EXPECT() *MockHubMockRecorder {
	return m.recorder
}

// Send mocks base method.
func (m *MockHub) Send(userID int64, event string, data any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Send", userID, event, data)
}

// Send indicates an expected call of Send.
func (mr *MockHubMockRecorder) Send(userID, event, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockHub)(nil).Send), userID, event, data)
}

// Sockets mocks base method.
func (m *MockHub) Sockets() map[int64]struct{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sockets")
	ret0, _ := ret[0].(map[int64]struct{})
	return ret0
}

// Sockets indicates an expected call of Sockets.
func (mr *MockHubMockRecorder) Sockets() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sockets", reflect.TypeOf((*MockHub)(nil).Sockets))
}
