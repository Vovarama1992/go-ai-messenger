// Code generated by MockGen. DO NOT EDIT.
// Source: ws-gateway//internal/ports/hub.go
//
// Generated by this command:
//
//	mockgen -source=ws-gateway//internal/ports/hub.go -destination=ws-gateway//internal/mocks/hub_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	ports "github.com/Vovarama1992/go-ai-messenger/ws-gateway/internal/ports"
	gomock "go.uber.org/mock/gomock"
)

// MockHub is a mock of Hub interface.
type MockHub struct {
	ctrl     *gomock.Controller
	recorder *MockHubMockRecorder
	isgomock struct{}
}

// MockHubMockRecorder is the mock recorder for MockHub.
type MockHubMockRecorder struct {
	mock *MockHub
}

// NewMockHub creates a new mock instance.
func NewMockHub(ctrl *gomock.Controller) *MockHub {
	mock := &MockHub{ctrl: ctrl}
	mock.recorder = &MockHubMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHub) EXPECT() *MockHubMockRecorder {
	return m.recorder
}

// GetConn mocks base method.
func (m *MockHub) GetConn(userID int64) ports.Conn {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConn", userID)
	ret0, _ := ret[0].(ports.Conn)
	return ret0
}

// GetConn indicates an expected call of GetConn.
func (mr *MockHubMockRecorder) GetConn(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConn", reflect.TypeOf((*MockHub)(nil).GetConn), userID)
}

// HasConnection mocks base method.
func (m *MockHub) HasConnection(userID int64) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasConnection", userID)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasConnection indicates an expected call of HasConnection.
func (mr *MockHubMockRecorder) HasConnection(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasConnection", reflect.TypeOf((*MockHub)(nil).HasConnection), userID)
}

// JoinRoom mocks base method.
func (m *MockHub) JoinRoom(userID, chatID int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "JoinRoom", userID, chatID)
}

// JoinRoom indicates an expected call of JoinRoom.
func (mr *MockHubMockRecorder) JoinRoom(userID, chatID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JoinRoom", reflect.TypeOf((*MockHub)(nil).JoinRoom), userID, chatID)
}

// LeaveRoom mocks base method.
func (m *MockHub) LeaveRoom(userID, chatID int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "LeaveRoom", userID, chatID)
}

// LeaveRoom indicates an expected call of LeaveRoom.
func (mr *MockHubMockRecorder) LeaveRoom(userID, chatID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LeaveRoom", reflect.TypeOf((*MockHub)(nil).LeaveRoom), userID, chatID)
}

// Register mocks base method.
func (m *MockHub) Register(userID int64, conn ports.Conn) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Register", userID, conn)
}

// Register indicates an expected call of Register.
func (mr *MockHubMockRecorder) Register(userID, conn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockHub)(nil).Register), userID, conn)
}

// SendToRoom mocks base method.
func (m *MockHub) SendToRoom(chatID int64, event string, data any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SendToRoom", chatID, event, data)
}

// SendToRoom indicates an expected call of SendToRoom.
func (mr *MockHubMockRecorder) SendToRoom(chatID, event, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendToRoom", reflect.TypeOf((*MockHub)(nil).SendToRoom), chatID, event, data)
}

// Unregister mocks base method.
func (m *MockHub) Unregister(userID int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Unregister", userID)
}

// Unregister indicates an expected call of Unregister.
func (mr *MockHubMockRecorder) Unregister(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unregister", reflect.TypeOf((*MockHub)(nil).Unregister), userID)
}
