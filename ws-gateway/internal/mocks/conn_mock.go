// Code generated by MockGen. DO NOT EDIT.
// Source: ./ws-gateway/internal/delivery/ws/conn_interface.go
//
// Generated by this command:
//
//	mockgen -source=./ws-gateway/internal/delivery/ws/conn_interface.go -destination=./ws-gateway/internal/mocks/conn_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	net "net"
	http "net/http"
	url "net/url"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockConn is a mock of Conn interface.
type MockConn struct {
	ctrl     *gomock.Controller
	recorder *MockConnMockRecorder
	isgomock struct{}
}

// MockConnMockRecorder is the mock recorder for MockConn.
type MockConnMockRecorder struct {
	mock *MockConn
}

// NewMockConn creates a new mock instance.
func NewMockConn(ctrl *gomock.Controller) *MockConn {
	mock := &MockConn{ctrl: ctrl}
	mock.recorder = &MockConnMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConn) EXPECT() *MockConnMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockConn) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockConnMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockConn)(nil).Close))
}

// Context mocks base method.
func (m *MockConn) Context() any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(any)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockConnMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockConn)(nil).Context))
}

// Emit mocks base method.
func (m *MockConn) Emit(eventName string, v ...any) {
	m.ctrl.T.Helper()
	varargs := []any{eventName}
	for _, a := range v {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Emit", varargs...)
}

// Emit indicates an expected call of Emit.
func (mr *MockConnMockRecorder) Emit(eventName any, v ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{eventName}, v...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Emit", reflect.TypeOf((*MockConn)(nil).Emit), varargs...)
}

// ID mocks base method.
func (m *MockConn) ID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ID indicates an expected call of ID.
func (mr *MockConnMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockConn)(nil).ID))
}

// Join mocks base method.
func (m *MockConn) Join(room string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Join", room)
}

// Join indicates an expected call of Join.
func (mr *MockConnMockRecorder) Join(room any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Join", reflect.TypeOf((*MockConn)(nil).Join), room)
}

// Leave mocks base method.
func (m *MockConn) Leave(room string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Leave", room)
}

// Leave indicates an expected call of Leave.
func (mr *MockConnMockRecorder) Leave(room any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Leave", reflect.TypeOf((*MockConn)(nil).Leave), room)
}

// LeaveAll mocks base method.
func (m *MockConn) LeaveAll() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "LeaveAll")
}

// LeaveAll indicates an expected call of LeaveAll.
func (mr *MockConnMockRecorder) LeaveAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LeaveAll", reflect.TypeOf((*MockConn)(nil).LeaveAll))
}

// LocalAddr mocks base method.
func (m *MockConn) LocalAddr() net.Addr {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LocalAddr")
	ret0, _ := ret[0].(net.Addr)
	return ret0
}

// LocalAddr indicates an expected call of LocalAddr.
func (mr *MockConnMockRecorder) LocalAddr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LocalAddr", reflect.TypeOf((*MockConn)(nil).LocalAddr))
}

// Namespace mocks base method.
func (m *MockConn) Namespace() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Namespace")
	ret0, _ := ret[0].(string)
	return ret0
}

// Namespace indicates an expected call of Namespace.
func (mr *MockConnMockRecorder) Namespace() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Namespace", reflect.TypeOf((*MockConn)(nil).Namespace))
}

// RemoteAddr mocks base method.
func (m *MockConn) RemoteAddr() net.Addr {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoteAddr")
	ret0, _ := ret[0].(net.Addr)
	return ret0
}

// RemoteAddr indicates an expected call of RemoteAddr.
func (mr *MockConnMockRecorder) RemoteAddr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoteAddr", reflect.TypeOf((*MockConn)(nil).RemoteAddr))
}

// RemoteHeader mocks base method.
func (m *MockConn) RemoteHeader() http.Header {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoteHeader")
	ret0, _ := ret[0].(http.Header)
	return ret0
}

// RemoteHeader indicates an expected call of RemoteHeader.
func (mr *MockConnMockRecorder) RemoteHeader() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoteHeader", reflect.TypeOf((*MockConn)(nil).RemoteHeader))
}

// Rooms mocks base method.
func (m *MockConn) Rooms() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rooms")
	ret0, _ := ret[0].([]string)
	return ret0
}

// Rooms indicates an expected call of Rooms.
func (mr *MockConnMockRecorder) Rooms() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rooms", reflect.TypeOf((*MockConn)(nil).Rooms))
}

// SetContext mocks base method.
func (m *MockConn) SetContext(ctx any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetContext", ctx)
}

// SetContext indicates an expected call of SetContext.
func (mr *MockConnMockRecorder) SetContext(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetContext", reflect.TypeOf((*MockConn)(nil).SetContext), ctx)
}

// URL mocks base method.
func (m *MockConn) URL() url.URL {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "URL")
	ret0, _ := ret[0].(url.URL)
	return ret0
}

// URL indicates an expected call of URL.
func (mr *MockConnMockRecorder) URL() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "URL", reflect.TypeOf((*MockConn)(nil).URL))
}
