// Code generated by MockGen. DO NOT EDIT.
// Source: internal/ports/hub.go
//
// Generated by this command:
//
//	mockgen -source=internal/ports/hub.go -destination=internal/mocks/hub_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	socketio "github.com/googollee/go-socket.io"
	gomock "go.uber.org/mock/gomock"
)

// MockAdviceHub is a mock of AdviceHub interface.
type MockAdviceHub struct {
	ctrl     *gomock.Controller
	recorder *MockAdviceHubMockRecorder
	isgomock struct{}
}

// MockAdviceHubMockRecorder is the mock recorder for MockAdviceHub.
type MockAdviceHubMockRecorder struct {
	mock *MockAdviceHub
}

// NewMockAdviceHub creates a new mock instance.
func NewMockAdviceHub(ctrl *gomock.Controller) *MockAdviceHub {
	mock := &MockAdviceHub{ctrl: ctrl}
	mock.recorder = &MockAdviceHubMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAdviceHub) EXPECT() *MockAdviceHubMockRecorder {
	return m.recorder
}

// Register mocks base method.
func (m *MockAdviceHub) Register(userID int64, conn socketio.Conn) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Register", userID, conn)
}

// Register indicates an expected call of Register.
func (mr *MockAdviceHubMockRecorder) Register(userID, conn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockAdviceHub)(nil).Register), userID, conn)
}

// Send mocks base method.
func (m *MockAdviceHub) Send(userID int64, event string, data any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Send", userID, event, data)
}

// Send indicates an expected call of Send.
func (mr *MockAdviceHubMockRecorder) Send(userID, event, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockAdviceHub)(nil).Send), userID, event, data)
}

// Unregister mocks base method.
func (m *MockAdviceHub) Unregister(userID int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Unregister", userID)
}

// Unregister indicates an expected call of Unregister.
func (mr *MockAdviceHubMockRecorder) Unregister(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unregister", reflect.TypeOf((*MockAdviceHub)(nil).Unregister), userID)
}
