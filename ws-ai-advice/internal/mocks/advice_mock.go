// Code generated by MockGen. DO NOT EDIT.
// Source: ws-ai-advice//internal/ports/advice.go
//
// Generated by this command:
//
//	mockgen -source=ws-ai-advice//internal/ports/advice.go -destination=ws-ai-advice//internal/mocks/advice_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockAdviceConsumer is a mock of AdviceConsumer interface.
type MockAdviceConsumer struct {
	ctrl     *gomock.Controller
	recorder *MockAdviceConsumerMockRecorder
	isgomock struct{}
}

// MockAdviceConsumerMockRecorder is the mock recorder for MockAdviceConsumer.
type MockAdviceConsumerMockRecorder struct {
	mock *MockAdviceConsumer
}

// NewMockAdviceConsumer creates a new mock instance.
func NewMockAdviceConsumer(ctrl *gomock.Controller) *MockAdviceConsumer {
	mock := &MockAdviceConsumer{ctrl: ctrl}
	mock.recorder = &MockAdviceConsumerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAdviceConsumer) EXPECT() *MockAdviceConsumerMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockAdviceConsumer) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockAdviceConsumerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockAdviceConsumer)(nil).Close))
}

// Start mocks base method.
func (m *MockAdviceConsumer) Start(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockAdviceConsumerMockRecorder) Start(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockAdviceConsumer)(nil).Start), arg0)
}
